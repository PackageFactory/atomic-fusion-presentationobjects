<?php declare(strict_types=1);
namespace Vendor\Site\Presentation\Component\Headline;

/*
 * This file is part of the Vendor.Site package.
 */

use Neos\Flow\Annotations as Flow;
use PackageFactory\AtomicFusion\PresentationObjects\Domain\Enum\PseudoEnumInterface;

/**
 * @Flow\Proxy(false)
 */
final class HeadlineType implements PseudoEnumInterface
{
    const TYPE_H1 = 'h1';
    const TYPE_H2 = 'h2';
    const TYPE_DIV = 'div';

    /**
     * @var array<string,self>|self[]
     */
    private static array $instances;

    private string $value;

    private function __construct(string $value)
    {
        $this->value = $value;
    }

    public static function from(string $string): self
    {
        if (!isset(self::$instances[$string])) {
            if ($string !== self::TYPE_H1
                && $string !== self::TYPE_H2
                && $string !== self::TYPE_DIV) {
                throw HeadlineTypeIsInvalid::becauseItMustBeOneOfTheDefinedConstants($string);
            }
            self::$instances[$string] = new self($string);
        }

        return self::$instances[$string];
    }

    public static function h1(): self
    {
        return self::from(self::TYPE_H1);
    }

    public static function h2(): self
    {
        return self::from(self::TYPE_H2);
    }

    public static function div(): self
    {
        return self::from(self::TYPE_DIV);
    }

    public function getIsH1(): bool
    {
        return $this->value === self::TYPE_H1;
    }

    public function getIsH2(): bool
    {
        return $this->value === self::TYPE_H2;
    }

    public function getIsDiv(): bool
    {
        return $this->value === self::TYPE_DIV;
    }

    /**
     * @return array<int,self>|self[]
     */
    public static function cases(): array
    {
        return [
            self::from(self::TYPE_H1),
            self::from(self::TYPE_H2),
            self::from(self::TYPE_DIV)
        ];
    }

    public function getValue(): string
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->value;
    }
}
