<?php declare(strict_types=1);
namespace Vendor\Site\Application;

/*
 * This file is part of the Vendor.Site package.
 */

use Neos\ContentRepository\Domain\Model\NodeInterface;
use Neos\ContentRepository\Domain\Model\NodeType;
use Neos\ContentRepository\NodeTypePostprocessor\NodeTypePostprocessorInterface;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\I18n\Translator;
use Neos\Neos\Service\DataSource\AbstractDataSource;
use Neos\Eel\ProtectedContextAwareInterface;
use Vendor\Site\Presentation\Component\Headline\HeadlineType;

class HeadlineTypeProvider extends AbstractDataSource implements ProtectedContextAwareInterface, NodeTypePostprocessorInterface
{
    /**
     * @Flow\Inject
     * @var Translator
     */
    protected $translator;

    /**
     * @var string
     */
    protected static $identifier = 'vendor-site-headline-types';

    public function getData(NodeInterface $node = null, array $arguments = []): array
    {
        $headlineTypes = [];
        foreach ($this->getValues() as $value) {
            $headlineTypes[$value]['label'] = $this->getLabel($value);
        }

        return $headlineTypes;
    }

    public function process(NodeType $nodeType, array &$configuration, array $options)
    {
        foreach ($options['propertyNames'] as $propertyName) {
            foreach ($this->getValues() as $value) {
                $configuration['properties'][$propertyName]['ui']['inspector']['editorOptions']['values'][$value] = [
                    'label' => $this->getLabel($value)
                ];
            }
        }
    }

    private function getLabel(string $value): string
    {
        return $this->translator->translateById(
            'headlineType.' . $value,
            [],
            null,
            null,
            'Headline',
            'Vendor.Site'
        ) ?: $value;
    }

    /**
     * @return array|string[]
     */
    public function getValues(): array
    {
        return HeadlineType::getValues();
    }

    public function allowsCallOfMethod($methodName): bool
    {
        return true;
    }
}
